name: Backend CI/CD

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source
        uses: actions/checkout@v3
        with:
          ref: main
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle (skip tests)
        run: ./gradlew clean build -x test

      - name: Debug – list local build/libs
        run: ls -lh build/libs

      # 📦 빌드된 JAR를 아티팩트로 업로드 (plain.jar 제외)
      - name: Upload JAR as artifact
        uses: actions/upload-artifact@v4
        with:
          name: built-jar
          path: |
            build/libs/*-SNAPSHOT.jar
            !build/libs/*plain.jar
          retention-days: 3

      - name: Prepare remote dirs
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            mkdir -p /home/${USER}/deploy_artifacts/build/libs
            sudo mkdir -p /opt/carrot
            sudo chown -R ${USER}:${USER} /home/${USER}/deploy_artifacts
            sudo chown -R ${USER}:${USER} /opt/carrot

      - name: Upload JAR to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "build/libs/*-SNAPSHOT.jar"
          target: "/home/ubuntu/deploy_artifacts/build/libs/"
          overwrite: true

      - name: Verify remote staging
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            echo "[REMOTE] staging list:"
            ls -lh /home/${USER}/deploy_artifacts/build/libs

      - name: Promote to /opt/carrot/app.jar and write .env
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            cd /home/${USER}/deploy_artifacts/build/libs

            LATEST_JAR=$(ls -t *-SNAPSHOT.jar | grep -v 'plain' | head -n 1)
            echo "[PROMOTE] using $LATEST_JAR"

            cp -f "$LATEST_JAR" /opt/carrot/app.jar
            sudo chown ${USER}:${USER} /opt/carrot/app.jar
            ls -lh /opt/carrot/app.jar

            sudo bash -c 'cat > /opt/carrot/.env <<EOT
            SPRING_PROFILES_ACTIVE=prod
            SERVER_PORT=8080
            SPRING_DATASOURCE_URL=${{ secrets.DB_URL }}
            SPRING_DATASOURCE_USERNAME=${{ secrets.DB_USERNAME }}
            SPRING_DATASOURCE_PASSWORD=${{ secrets.DB_PASSWORD }}
            CORS_ALLOWED_ORIGINS=${{ secrets.CORS_ALLOWED_ORIGINS }}
            EOT'  
            sudo chmod 600 /opt/carrot/.env
            sudo sed -i "s/\r$//" /opt/carrot/.env

      - name: Validate deployed JAR contents
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            echo "[VALIDATE] Checking if TestApi.class exists in deployed jar..."
            jar tf /opt/carrot/app.jar | grep -q "TestApi.class" && echo "✅ TestApi found" || (echo "❌ TestApi NOT found" && exit 1)

      - name: Restart Spring Boot on EC2
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            sudo systemctl daemon-reload
            sudo systemctl restart carrot
            sudo systemctl status carrot --no-pager
