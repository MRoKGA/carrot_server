name: Backend CI/CD

on:
  push:
    branches:
      - main

concurrency:
  group: backend-deploy
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle (skip tests)
        run: ./gradlew clean build -x test

      - name: Debug – list local build/libs
        run: |
          echo "[RUNNER] $(pwd)"
          ls -lh build/libs || true
          find build -type f -name "*-SNAPSHOT.jar" -printf "%p %k KB\n" || true

      # (선택) 디버깅용 아티팩트 업로드
      - name: Upload JAR as artifact
        uses: actions/upload-artifact@v4
        with:
          name: built-jar
          path: |
            build/libs/*-SNAPSHOT.jar
            !build/libs/*plain.jar
          retention-days: 3

      - name: Prepare remote dirs
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            mkdir -p /home/${USER}/deploy_artifacts
            sudo mkdir -p /opt/carrot
            sudo chown -R ${USER}:${USER} /home/${USER}/deploy_artifacts /opt/carrot

      - name: Upload JAR to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "build/libs/*-SNAPSHOT.jar"
          target: "/home/ubuntu/deploy_artifacts/"
          overwrite: true

      - name: Verify remote staging
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            echo "[REMOTE] uploaded jars:"
            find /home/${USER}/deploy_artifacts -maxdepth 2 -type f -name "*-SNAPSHOT.jar" -ls

      - name: Promote to /opt/carrot/app.jar and write .env
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            # 최신 JAR 자동 탐색 (plain 제외)
            LATEST_JAR=$(find /home/${USER}/deploy_artifacts -type f -name "*-SNAPSHOT.jar" ! -name "*plain*" -printf "%T@ %p\n" | sort -n | tail -1 | cut -d' ' -f2-)
            if [ -z "$LATEST_JAR" ]; then echo "❌ No JAR found"; exit 1; fi
            echo "[PROMOTE] Using: $LATEST_JAR"

            sudo rm -f /opt/carrot/app.jar
            sudo cp "$LATEST_JAR" /opt/carrot/app.jar
            sudo chown ${USER}:${USER} /opt/carrot/app.jar
            echo "[HASH]"; sha256sum /opt/carrot/app.jar

            # 환경파일 기록
            sudo bash -c 'cat > /opt/carrot/.env <<EOT
            SPRING_PROFILES_ACTIVE=prod
            SERVER_PORT=8080
            SPRING_DATASOURCE_URL=${{ secrets.DB_URL }}
            SPRING_DATASOURCE_USERNAME=${{ secrets.DB_USERNAME }}
            SPRING_DATASOURCE_PASSWORD=${{ secrets.DB_PASSWORD }}
            CORS_ALLOWED_ORIGINS=${{ secrets.CORS_ALLOWED_ORIGINS }}
            SPRING_JPA_HIBERNATE_DDL_AUTO=update
            SPRING_FLYWAY_ENABLED=false
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            SMS_API_KEY=${{ secrets.SMS_API_KEY }}
            SMS_SECRET_KEY=${{ secrets.SMS_SECRET_KEY }}
            SMS_SENDER=${{ secrets.SMS_SENDER }}
            EOT'
            sudo chmod 600 /opt/carrot/.env
            sudo sed -i "s/\r$//" /opt/carrot/.env
            echo "[ENV] /opt/carrot/.env written."
            

      - name: Install/Update systemd unit (carrot.service)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            RUN_USER="${USER}"  # ← 현재 SSH 로그인 사용자(예: ubuntu)
            # ▼▼▼ EnvironmentFile 지정으로 .env를 서비스 환경에 주입 ▼▼▼
            #     systemd가 직접 .env를 읽어서 프로세스 환경변수로 전달한다.
            sudo tee /etc/systemd/system/carrot.service >/dev/null <<EOF
            [Unit]
            Description=Carrot Spring Boot Service
            After=network.target
  
            [Service]
            User=${RUN_USER}   # ← EC2 로그인 사용자로 실행
            WorkingDirectory=/opt/carrot
            EnvironmentFile=/opt/carrot/.env   # ← (.env 로드) [추가]
            ExecStart=/usr/bin/java -jar /opt/carrot/app.jar
            Restart=always
            RestartSec=5
            LimitNOFILE=65536
            StandardOutput=journal
            StandardError=journal
  
            [Install]
            WantedBy=multi-user.target
            EOF
  
            sudo systemctl daemon-reload
            sudo systemctl enable carrot.service


      - name: Restart Spring Boot on EC2
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            sudo systemctl daemon-reload
            sudo systemctl restart carrot.service
            sudo systemctl status carrot.service --no-pager || true
            # 잠깐 대기(기동 시간)
            sleep 3
            sudo journalctl -u carrot.service -n 60 --no-pager || true

      # ✅ Health-check: EC2 안에서 실제 엔드포인트 확인 (성공/실패를 CI에 반영)
      - name: Health check on EC2
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            # curl 없을 수도 있으니 보장
            command -v curl >/dev/null 2>&1 || (sudo apt-get update -y && sudo apt-get install -y curl)

            echo "[HEALTH] probing http://127.0.0.1:8080/api/theTest"
            for i in {1..30}; do
              if curl -fsS http://127.0.0.1:8080/api/theTest | head -c 200; then
                echo; echo "✅ Health OK"
                exit 0
              fi
              sleep 2
            done
            echo "❌ Health check failed"
            sudo journalctl -u carrot.service -n 200 --no-pager || true
            exit 1
